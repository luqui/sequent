Introduction
------------

This is a programming language designed around the principle that you construct
programs as in Coq's proof mode.

You manipulate both knowledge and variables.  But knowledge manipultion is soft;
you can claim things without proof, assuming you document them.

The code itself is not made to be especially readable.  In fact, the code itself
should almost be absent, like the strokes of an artist, leaving only the
result to represent what the code did.

Signatures play the role of functions in this language. A signature specifies
inputs and outputs, including names and knowledge.

The following three propositions form the definition of Divides.  When asked
for a proof, they will be "proved by definition"; i.e.  moved into the
assumptions when `Divides` is quantified over. (We will talk about numerals
and the `*` symbol later).

    x :nat   -> [1 Divides x]

    x :nat   -> [x Divides 0]

    x y :nat -> [x Divides x*y]

We then define a division with remainder theorem:

    x y :nat -> q r :nat [x = q*y + r] [r < y]

This theorem has outputs (`q` and `r`) which must be computed, so you cannot
simply prove by definition.  You can give expressions for `q` and `r`, however,
and then explain the two returned properties in documentation. I don't know how
yet.

Finally, a `gcd` theorem.  This also returns a witness so it needs a
computation and cannot simply be explained.  However, with what we have built
up, we can compute it without any appeal to an underlying language.

    x y :nat
    ->
    gcd :nat
    [gcd Divides x] [gcd Divides y] 
    ( [d' Divides x] [d' Divides y] -> [d' Divides gcd] )

The witness from applying this theorem can be referred to as `gcd(x,y)`. It
introduces obligations for `x:nat` and `y:nat`, and produces the knowledge
`[gcd(x,y) Divides x]`, etc.

Similarly, the division algorithm can be referred to as `q(x=x,y=y)` and 
`r(x=x,y=y)`, if left defined as above.  When one is applied, the suitably skolemized 
other is introduced into the context with it.

Syntax
======

The syntax of sequent is meant to mimic the conventions of mathematics, however
there are a few divergences just to give it its own flavor.

Signatures
----------

A *clause* of a signature is a set of terms, which are variables and
propositions.  The terms are separated by spaces.  A term may be:

* A proposition, which is surrounded in square brackets.  Propositions have
    a free-form syntax, in which the name of the proposition can go between
    its arguments.  For example `[x divides y]` is an example usage or definition
    of the proposition `[_ divides _]`.  What count as variables and what count
    as structure depends on the surrounding quantification.  Parentheses occurring
    in the syntax of a proposition ensure that that position is interpreted
    as an expression. 
* A variable clause, which is a list of variables (as barewords) followed by a
    list of types (each introduced with a colon).  A type is shorthand for a
    proposition: `x :nat` is shorthand for `[nat x]`. The spaces are interpreted
    as part of the type until the next colon or opening bracket, so: 
    `x y : list nat : sorted` is short for the propositions `[list nat x]`,
    `[sorted x]`, `[list nat y]`, `[sorted y]`.
* A signature, surrounded in parentheses.

Signatures may be labeled by putting a label name with a colon before them; 
e.g. `Division: (x y :nat -> q r [x = q*y+r])`.  Labeling will be important
later.

A signature is an implication: `P -> Q`, where `P` and `Q` are clauses.

Implication is *non*-associative: you have to insert parentheses to nest
them.  Parentheses should be minimal, because of the conjunctive properties
of clauses.

We can now see how the `gcd` definition might be interpreted:

    x y :int [x > 0] [y > 0]
    -> 
    gcd :int [gcd > 0] [gcd divides x] [gcd divides y]

However, the quantifiers are still unclear.

Quantification
--------------

Signatures are formulas in a logical calculus (it is unclear which one exactly,
and it is rather unimportant because consistency is not necessary).  As such,
the variables in theorems are quantified by universal and existential
quantifiers.  These quantifiers and their destructors are the basis of data
manipulation in sequent.

Every variable in a variable clause is quantified.  The quantification depends
on the position of the variable clause.

* If it occurs to the immediate left of an implication clause, then the
    quantification is universal.  `x y : nat -> ...` means 
    `forall x, forall y, [nat x] [nat y], ...`.  The variables are in scope
    in both groups of the implication (both `P` and `Q` in `P -> Q`).
* If not, then the quantification is existential.

So, for example, `x : nat -> y : nat` means `forall x, ([nat x] -> exists y, [nat y])`.
`x` is in scope for the body (antecedent *and* consequent) of the implication and
`y` is in scope for the consequent and, suitably Skolemized, everywhere the
implication is assumed.

Labeled Clauses
---------------

There is a sophisticated syntax for dealing with labeled clauses, which play 
the role of modules in Sequent.

When a clause is labeled, it introduces a parameterized namespace into every
scope in which it is directly assumed.  It is parameterized on the variables
of its antecedent, and it has as "members" (of the namespace) the variables
of its consequent.  For example:

    Gcd: (x y :nat -> gcd :nat)
    ->
    [Gcd(2,4).gcd = 2]

We see here that the order of variables in the clause matters.  The 
conclusion may also refer to its parameters in named style:

    [Gcd(x=2, y=4).gcd = 2]

Right-nested clauses introduce nested namespaces:

    Foo: (x y -> Bar: (z -> baz))
    ->
    Foo(2,4).Bar(6).baz
    
When the label is the same as the variable, the member access can be omitted:

    gcd: (x y :nat -> gcd :nat)
    ->
    [gcd(2,4) = 2]

This dynamic nests.

    foo: (x -> foo: (y -> foo))
    ->
    foo(x)(y)
    
When a group has exactly one variable in its consequent, and it is unambiguous (no
other group has the same variable in its consequent, and the name is used as a
label), the default name for the hypothesis is the name of that variable.  So
the following are equivalent:

    Gcd: (x y :nat -> gcd :nat) -> [Gcd(x=2,y=4).gcd = 2]
    Gcd: (x y :nat -> gcd :nat) -> [Gcd(2,4).gcd = 2]
    gcd: (x y :nat -> gcd :nat) -> [gcd(2,4).gcd = 2]
    gcd: (x y :nat -> gcd :nat) -> [gcd(2,4) = 2]
    (x y :nat -> gcd :nat) -> [gcd(2,4) = 2]
    
Labels may have "import statements", introducing names into the surrounding scope.

    Divide(r): (x y :nat -> q r :nat [x = q*y+r]) -> [r(x,y) = 0]
    Divide(*): (x y :nat -> q r :nat [x = q*y+r]) -> [r(x,y) = 0]

And the label may be omitted if an import statement is given:
    
    (*): (x y :nat -> q r :nat [x = q*y+r]) -> [r(x,y) = 0]
    
This is only possible when it would not cause ambiguities.

When a labeled clause is used, its assumptions are introduces as obligations and
all the knowledge in its consequents are introduced as hypotheses.  This statement

    gcd (x y :nat -> gcd :nat)
    ->
    [gcd(2,4) = 2]
    
has the implicit proof state

    gcd (x y :nat -> gcd :nat)
    gcd(2,4) : nat
    ->
    2:nat
    4:nat
    [gcd(2,4) = 2]

That is, for it to be valid to use `gcd` on `2` and `4` we have to show that `2` and `4` are
`nat`s.

Operators
---------

Sequent uses the Haskell-style convention that names can be operatorified by
placing them in backticks:

    gcd(2,4)
    2 `gcd` 4
    
and operators can be namified by placing them in parentheses:

    x * y
    (*)(x,y)

In such a way, hypotheses can be named after operators as well, so you
could assume a multiplication operator like so:

    (*): (x y :nat -> (*) :nat)
    
Which is equivalent to:

    (x y :nat -> (*) :nat)
    
The prime character `'` is both a valid identifier and operator character, and
neither may lead with it.

    (x y :nat -> (*) :nat)
    (x y :nat -> (*') : nat)
    ->
    [x*y = x*'y]

Execution
=========

Sequent is not directly executable; rather, it is a code generation tool.  Think
of it as a sophisticated type checker living on top of whatever language you like, 
where all the types are erased when compiled.

Object Language
---------------

Sequent is defined *abstractly* in terms of an object language.  For example, a
sequent session may generate a javascript function from each skolem function.
The object language only needs to support basic lambda calculus facilities, the
system will do the stitching given the object language's syntax for lambda and
apply (and various other things, surely).

Even when a goal is discharged by documentation, if the goal required a witness
then a witness must be generated.  This is done in the object language since it
apparently could not be done in sequent.  The witness is simply an expression in
the object language in terms of the hypotheses (which have been reified by some
object language-dependent rule).

Implementing a witness in an object language entangles that implementation to
that language.  Like everything, it is abstracted over, so the parts of the
implementation that do not depend on the object language can be shared between
different object languages.

Environment
===========

Now, we have seen a lot of signatures, but what do their implementations look
like? The answer, as I hinted in the introduction, is nothing.  Signtatures
are the record of a sculture, which is created interactively and has no
(user-facing) visual representation without replaying the scuplting process.

The environment provides:

* A way to state signatures/theorems that need impliementation/proof.
* A "tactic language" (though not necessarily text-based) to produce
    implementations/proofs.
* A way to introduce and discharge hypotheses and goals.
* A search engine for previously defined signatures

The environment has the ability to edit anything about the context.  If you are
editing a proof, you may introduce a hypotheses into the scope of the theorem
(hence modifying its statement), or into an outer, more global scope (if you
forgot something about the structures you are using).  You may use the tactic
language even when you are not editing a proof, and this modifies the shared
context (eg. it can introduce hypotheses for all further proofs in this
context).

You may discharge goals by either proving them (matching them up with a
hypothesis) or by *documenting* them: admitting them and providing an english
explanation about why it should be true .  This documentation goes into the 
detail view of theorems, so we can see what non-formal assumptions have been 
made.

The search engine is whatever I can make of it; it's a complex goal.  But it
ought to be as powerful as possible: you can give it matching criteria for
theorems, e.g. you could query a la Hoogle:

    x y : nat -> z : nat

This will search for theorems that require at least two `nat`s as hypotheses and
give at least a `nat` as a result.  This is not checking for subtypes, but
rather for a sense of matching: often we know what kind of information we will
need to compute something, but we may not realize how much. It is not common
that we don't realize that we *don't* need some information (though a looser
search mode could be provided).  This is long-term stuff so I will leave it for
now.

Techniques
==========

Sequent is a very different kind of language.  In this section we discuss programming
patterns.

Abstraction and Modules
-----------------------

The full form of signatures are completely quantified, closed terms.  There are
no references to globals.  The full signature represents exactly the reasoning 
that took place in the implementation, so any theorems/functions that are referenced 
are included in its hypotheses.  Hence, the main function of a complex program will 
depend on *all the reasoning in the program*, that is, the number of hypotheses will
be proportional to the size of the program.

To make this manageable, you may organize your hypotheses into theories, using them
as namespaces.  Since the clauses in the consequent can depend on each other, this makes
a natural organizational technique for modules.  For example, we may find it helpful to
refer to a theory of unary naturals, so we can assume it as a hypothesis:

    Nat: (->
        nat :*
        zero :nat
        (x :nat -> succ :nat)
        case: (x :nat -> [x = 0] \/ (-> y :nat [x = succ y]))
    )
    
And then we can define a theory of utilities:

    NatUtils: (->
        (x y :Nat -> (+))
        (x y :Nat -> (*))
    )
    
The full form of `NatUtils` is parameterized over the nat siguature; i.e.:

    NatUtils: (Nat: (-> nat :* zero :nat ...) ->
        ...
    )

And one could make a module containing both:

    Nat: (->
        Nat(*): (-> ...)
        NatUtils(*): (-> ...)
    )
    
The database can store proofs for all of these; a proof of the latter `Nat` module
would aggregate proofs for the others (how is this done -- we don't have (want?)
a method for aggregating proofs).

